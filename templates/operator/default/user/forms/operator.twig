{% extends parent_template %}

{% block title %}
    {% if record|default is not empty and record.exists %}
        {{ record.formatted_name }} - {{ Lang.get('general.edit_item', {'item': Lang.choice('general.operator', 1)}) }}
    {% else %}
        {{ Lang.get('general.add_item', {'item': Lang.choice('general.operator', 1)}) }}
    {% endif %}
{% endblock %}

{% block content %}

    {% if record|default is not empty and record.exists %}
        {{ form_model(record, { 'route': [ 'user.operator.operator.update', record.id ], 'method': 'PUT', 'files': true, 'class': 'validate' }) }}
    {% else %}
        {{ form_open({ 'route': 'user.operator.operator.store', 'files': true, 'class': 'validate' }) }}
    {% endif %}

        <h2>{{ Lang.get('user.user_details') }}</h2>
        <div class="form-container first">
            {% include 'operator.' ~ template ~ '.user.forms.profile' with { 'operator': true, 'managing': true } %}
        </div>

        <h2>{{ Lang.get('user.operator_settings') }}</h2>
        <div class="form-container first">
            <div class="form-row">
                {{ form_label('department', Lang.choice('ticket.department', 2)) }}
                <div class="input-container">
                    <span class="description">{{ Lang.get('user.op_settings_dept_desc') }}</span>
                    <br />
                    <div style="margin-top: 5px;">
                        {{ Lang.get('user.op_settings_group_dept') }}
                        {{ form_select('group_departments', departments, record.assignedDepartments([]).pluck('id').all(),
                            {'multiple': 'multiple', 'disabled': 'disabled'}) }}
                        <span class="description">{{ Lang.get('user.op_settings_group_dept_desc') }}</span>
                    </div>
                    <div style="margin-top: 10px;">
                        {{ Lang.get('user.op_settings_individual_dept') }}
                        {{ form_select('depts[]', departments, record.departments.pluck('id').all(), {'multiple': 'multiple'}) }}
                        <span class="description">{{ Lang.get('user.op_settings_individual_dept_desc') }}</span>
                    </div>
                </div>
            </div>

            <div class="form-row form-full">
                {{ form_label('ticket_signature', Lang.get('ticket.ticket_signature')) }}
                <div class="input-container">
                    <div style="margin-bottom: 10px;">
                        {{ form_redactor_mf('ticket_signature', signature) }}
                    </div>
                    <span class="description">
                        {{ Lang.get('user.ticket_signature_desc') }}
                        {% if auth_user().hasPermission('view.operatorsignature') %}
                            {{ Lang.get('user.operator_signature_desc', {'route': route('user.operator.operatorsignature')})|raw }}
                        {% endif %}
                    </span>
                </div>
            </div>

            <div class="form-row">
                {{ form_label('default_reply_options', Lang.get('ticket.default_reply_options')) }}
                <div class="input-container">
                    <div class="input-group">
                        <label>
                            {{ form_check('default_reply_options[send_email_to_users]', 1,
                                opsetting|default is not empty ? opsetting.default_reply_options['send_email_to_users'] : 1) }}
                            {{ Lang.get('ticket.send_email_to_users') }}
                        </label><br />
                        <label>
                            {{ form_check('default_reply_options[back_to_grid]', 1,
                                opsetting|default is not empty ? opsetting.default_reply_options['back_to_grid'] : null) }}
                            {{ Lang.get('ticket.back_to_grid') }}
                        </label><br />
                        <label>
                            {{ form_check('default_reply_options[take_ownership]', 1,
                                opsetting|default is not empty ? opsetting.default_reply_options['take_ownership'] : null) }}
                            {{ Lang.get('ticket.take_ownership') }}
                        </label><br />
                        <label>
                            {{ form_check('default_reply_options[pause_duetime]', 1,
                                opsetting|default is not empty ? opsetting.default_reply_options['pause_duetime'] : null) }}
                            {{ Lang.get('ticket.pause_duetime') }}
                        </label><br />
                        <label for="to_status">{{ Lang.get('ticket.set_status') }}:</label>
                        <select id="to_status" name="default_reply_options[to_status]">
                            <option value="0" {% if opsetting|default is not empty and opsetting.default_reply_options['to_status'] == 0 %}selected="selected"{% endif %}>
                                -- {{ Lang.get('general.unchanged') }} --
                            </option>
                            {% for status in statuses %}
                                <option value="{{ status.id }}" {% if opsetting|default is not empty and opsetting.default_reply_options['to_status'] == status.id %}selected="selected"{% endif %}>
                                    {{ status.name }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <span class="description">
                        {{
                            Lang.get('ticket.default_reply_options_desc', {
                                'reply_option': Lang.get('ticket.send_email_to_operators'),
                                'department_option': Lang.get('ticket.email_operators')
                            })
                        }}
                    </span>
                </div>
            </div>

            <div class="form-row">
                {{ form_label('email_notifications', Lang.get('user.email_notifications')) }}
                <div class="input-container">
                    <div class="input-group">
                        <label>
                            {{ form_check('email_notifications[ticket]', 1, opsetting|default is not empty ? opsetting.email_notifications['ticket'] : true) }} {{ Lang.choice('ticket.ticket', 2) }}
                        </label><br />
                        <label>
                            {{ form_check('email_notifications[login]', 1, opsetting|default is not empty ? opsetting.email_notifications['login'] : true) }} {{ Lang.get('notification.failed_logins') }}
                        </label><br />
                        <label>
                            {{ form_check('email_notifications[comment]', 1, opsetting|default is not empty ? opsetting.email_notifications['comment'] : true) }} {{ Lang.get('notification.new_comments') }}
                        </label><br />
                        <label>
                            {{ form_check('email_notifications[message]', 1, opsetting|default is not empty ? opsetting.email_notifications['message'] : true) }} {{ Lang.choice('general.operator', 1) }} {{ Lang.choice('general.message', 1) }}
                        </label>
                    </div>
                    <span class="description">{{ Lang.get('user.email_notifications_desc') }}</span>
                </div>
            </div>

        </div>

        <h2>{{ Lang.get('user.confirm_password') }}</h2>
        <div class="form-container first">
            <div class="form-row">
                {{ form_label('confirm_password', Lang.get('user.confirm_password')) }}
                <div class="input-container">
                    {{ form_password('confirm_password', null, {'size': 30}) }}<br />
                    <span class="description">{{ Lang.get('user.operator_confirm_password') }}</span>
                </div>
            </div>
        </div>

        <div class="form-button">
            {{ form_submit(Lang.choice('general.submit', 1)) }}
        </div>

    {{ form_close() }}

{% endblock %}

{% block scripts_footer %}
    {% if jsValidator|default is not empty %}
        {{ jsValidator|raw }}
    {% endif %}

    <!-- Passwords -->
    <script src="{{ asset_rev('resources/assets/operator/js/randomPassword.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/libs/hideShowPassword/js/hideShowPassword.min.js') }}"></script>

    <!-- Selectize -->
    <link href="{{ asset_rev('resources/assets/libs/selectize/css/selectize.css') }}" rel="stylesheet" />
    <script src="{{ asset_rev('resources/assets/libs/selectize/js/selectize.min.js') }}"></script>

    <!-- Redactor -->
    <script src="{{ asset_rev('resources/assets/libs/redactor/js/redactor.min.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/general/js/redactor_config.js') }}"></script>
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/libs/redactor/css/redactor.css') }}">
    <script src="{{ asset_rev('resources/assets/libs/redactor/js/plugins.min.js') }}"></script>

    <!-- Code Editor -->
    <script src="{{ asset_rev('resources/assets/libs/codemirror/js/codemirror.min.js') }}"></script>
    <link rel="stylesheet" href="{{ asset_rev('resources/assets/libs/codemirror/css/codemirror.css') }}">
    <script src="{{ asset_rev('resources/assets/libs/sweetalert2/js/sweetalert2.min.js') }}"></script>
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/libs/sweetalert2/css/sweetalert2.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/operator/css/codeeditor.css') }}" />
    <script type="text/javascript" src="{{ asset_rev('resources/assets/operator/js/redactor/codeeditor.js') }}"></script>

    <!-- Signatures -->
    <script src="{{ asset_rev('resources/assets/operator/js/redactor/mergefields.js') }}"></script>
    <script type="text/javascript">
        var opts = {
            focus: false,
            imageUpload: null,
            mergeFields: {
                tickets: true,
                organisations: '{{ Config.get('settings.organisations_enabled') }}'
            },
            plugins: ['syntax', 'imagemanager', 'table', 'video', 'fontcolor', 'fontfamily', 'fontsize', 'mergeFields']
        };

        // Do not initialise redactor on the dummy DOM element.
        $('textarea[name="ticket_signature"]').redactor($.extend($.Redactor.default_opts, opts));
    </script>

    <script type="text/javascript">
        $(document).ready(function() {
            // Enable hide/show password toggle
            callHideShowPassword();

            // Generate a new random password
            $('a#generatePassword').click(function() {
                var password = randomPassword(8);

                if (document.getElementById('password').type == 'text') {
                    document.getElementById('password').value=password;
                } else {
                    document.getElementById('password').type='text';
                    document.getElementById('password').value=password;
                    document.getElementById('password').type='password';
                }
            });

            // On changing group, fetch newly assigned departments and update department selectizes accordingly
            var xhr;
            $('select[name="groups[]"]').selectize({
                plugins: ['remove_button'],
                delimiter: ',',
                placeholder: Lang.get('user.select_group'),
                onChange: function (values) {
                    var selectize = $groupDepartments[0].selectize,
                            deptSelectize = $departments[0].selectize,
                            deptSelected = deptSelectize.getValue();

                    selectize.load(function(callback) {
                        xhr && xhr.abort();
                        xhr = $.ajax({
                            url: laroute.route(
                                'user.operator.operator.departments',
                                {
                                    id: {{ record.exists ? record.id : 0 }},
                                    department_ids: '',
                                    group_ids: values
                                }
                            ),
                            success: function(res) {
                                // Clear selected values
                                selectize.clear();

                                // Refresh individual departments list
                                deptSelectize.clearOptions();
                                $.each(fullDepartmentOptions, function (index, value) {
                                    deptSelectize.addOption(value);
                                });

                                // Select all assigned departments via groups.
                                // Remove these from individual departments list
                                $.each(res.data, function (index, value) {
                                    selectize.addItem(value.id, true);
                                    deptSelectize.removeOption(value.id);
                                });

                                // Re-select departments that we had before
                                deptSelectize.setValue(deptSelected);

                                callback();
                            },
                            error: function() {
                                callback();
                            }
                        })
                    });
                }
            });

            var $groupDepartments = $('select[name="group_departments"]').selectize();

            var $departments = $('select[name="depts[]"]').selectize({
                plugins: ['remove_button']
            });

            // Save the full list of department options
            var fullDepartmentOptions = $departments[0].selectize.options;

            // Remove selected group departments from individual departments.
            $.each($groupDepartments[0].selectize.getValue(), function (index, value) {
                $departments[0].selectize.removeOption(value);
            });
        });
    </script>
{% endblock %}